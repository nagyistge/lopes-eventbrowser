#include "CanvasCollection.h"
#include "global.h"

//the line that identifies a file as a valid canvas config file
#define MAGIC_LINE ";-*-EVENT_BROWSER_CANVASES-*-"

#ifdef DEBUG
#include <iostream>

#endif

using namespace std;

CanvasCollection::CanvasCollection() {};

CanvasCollection::~CanvasCollection()
{
    for (int i = 0; i < (int) canvases.size(); ++i)
    {
        delete canvases[i];
    }
}

void CanvasCollection::removeCanvas(int index)
{
    delete canvases[index];
    canvases.erase(canvases.begin() + index);
}

void CanvasCollection::print()
{
    cout << "-----------------------------------" << endl;
    cout << "There are " << size() << " canvases: " << endl;
    
    for (int i = 0; i <(int) canvases.size(); ++i)
    {
    
        cout << canvases[i]->getName() << endl;
    }
        
}

void CanvasCollection::saveToFile(string filename)
{
     ofstream file;
     file.open (filename.c_str(), ios::trunc);
     if (file.is_open())
     {
        file << MAGIC_LINE << endl;
        file << 
";************************************************ \n"
";This file is generated by browser and contains \n"
";definitions of canvases created during a program\n"
";session. This file can be parsed later by the\n"
";program.\n"
";\n"
";You can edit this file by hand; in which case, be\n"
";aware of the syntax:\n"
";each \"canvas\" is headed by a header of the format:\n"
";[Canvas:_canvas type_]\n"
";where canvas type corresponds to the enum defined\n"
";in Canvas.h. The rest of the variables are defined\n"
";in the format:\n"
";name = value\n"
";\"name\" conforms to the rules regarding the names\n"
";of c-style variables.\n"
";************************************************     \n"
             << endl;
        
         for (int i = 0; i < (int) canvases.size(); ++i)
            canvases[i]->streamToFile(file);

         file.close();
     }
}

CanvasCollection* CanvasCollection::readFromFile(string filename)
{
    ifstream file(filename.c_str());
    string line;

    getline(file,line,END_OF_LINE);
    // if MAGIC_LINE not found then not a valid file to parse
    if (line.find(MAGIC_LINE) == string::npos) return NULL;

    CanvasCollection* cc = new CanvasCollection();
    Canvas *c = new Canvas();

    while (c->parseFromFile(file))
    {
        cc->push_back(c);
        c = new Canvas();
    }

    return cc;
}
